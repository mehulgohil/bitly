// Code generated by MockGen. DO NOT EDIT.
// Source: .\IDataAccessLayer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mehulgohil/shorti.fy/redirect/models"
)

// MockIDataAccessLayer is a mock of IDataAccessLayer interface.
type MockIDataAccessLayer struct {
	ctrl     *gomock.Controller
	recorder *MockIDataAccessLayerMockRecorder
}

// MockIDataAccessLayerMockRecorder is the mock recorder for MockIDataAccessLayer.
type MockIDataAccessLayerMockRecorder struct {
	mock *MockIDataAccessLayer
}

// NewMockIDataAccessLayer creates a new mock instance.
func NewMockIDataAccessLayer(ctrl *gomock.Controller) *MockIDataAccessLayer {
	mock := &MockIDataAccessLayer{ctrl: ctrl}
	mock.recorder = &MockIDataAccessLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDataAccessLayer) EXPECT() *MockIDataAccessLayerMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockIDataAccessLayer) GetItem(hashKey string) (models.URLTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", hashKey)
	ret0, _ := ret[0].(models.URLTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockIDataAccessLayerMockRecorder) GetItem(hashKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockIDataAccessLayer)(nil).GetItem), hashKey)
}

// SaveItem mocks base method.
func (m *MockIDataAccessLayer) SaveItem(item models.URLTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItem indicates an expected call of SaveItem.
func (mr *MockIDataAccessLayerMockRecorder) SaveItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItem", reflect.TypeOf((*MockIDataAccessLayer)(nil).SaveItem), item)
}
