// Code generated by MockGen. DO NOT EDIT.
// Source: .\IEncodingAlgorithm.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEncodingAlgorithm is a mock of IEncodingAlgorithm interface.
type MockIEncodingAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *MockIEncodingAlgorithmMockRecorder
}

// MockIEncodingAlgorithmMockRecorder is the mock recorder for MockIEncodingAlgorithm.
type MockIEncodingAlgorithmMockRecorder struct {
	mock *MockIEncodingAlgorithm
}

// NewMockIEncodingAlgorithm creates a new mock instance.
func NewMockIEncodingAlgorithm(ctrl *gomock.Controller) *MockIEncodingAlgorithm {
	mock := &MockIEncodingAlgorithm{ctrl: ctrl}
	mock.recorder = &MockIEncodingAlgorithmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEncodingAlgorithm) EXPECT() *MockIEncodingAlgorithmMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockIEncodingAlgorithm) Encode(input string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", input)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockIEncodingAlgorithmMockRecorder) Encode(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockIEncodingAlgorithm)(nil).Encode), input)
}
